import json
import logging
import mock
import pytest
import requests_mock
import requests
import os

from pubtools._quay import exceptions
from pubtools._quay.utils import misc
from .utils.misc import sort_dictionary_sortable_values, compare_logs, mock_entry_point

# flake8: noqa: E501

LOG = logging.getLogger()
logging.basicConfig()
LOG.setLevel(logging.INFO)


def test_run_entrypoint(caplog):
    def side_effect_entrypoint():
        print("output generated by entrypoint")
        LOG.warning("log generated by entrypoint")
        LOG.info("environment variable: {0}".format(os.environ["PYXIS_PASSWORD"]))
        return {"pyxis": "data"}

    with mock_entry_point(
        "pubtools-pyxis", "console_scripts", "pubtools-pyxis-get-operator-indices"
    ) as entrypoint:
        entrypoint.side_effect = side_effect_entrypoint
        ret_val = misc.run_entrypoint(
            ("pubtools-pyxis", "console_scripts", "pubtools-pyxis-get-operator-indices"),
            "pubtools-pyxis-get-operator-indices",
            [
                "--pyxis-krb-principal",
                "some-principal@REDHAT.COM",
                "--organization",
                "redhat-operators",
                "--ocp-versions-range",
                "v4.5",
                "--pyxis-krb-ktfile",
                "/etc/pub/some.keytab",
            ],
            {"PYXIS_PASSWORD": "some-password"},
        )
        expected_logs = [
            "Running task with arguments:",
            "pubtools-pyxis-get-operator-indices --pyxis-krb-principal some-principal@REDHAT\.COM --organization \\\\",
            "redhat-operators --ocp-versions-range v4.5 --pyxis-krb-ktfile /etc/pub/some\.keytab",
            "log generated by entrypoint",
            "environment variable: some-password",
        ]
        compare_logs(caplog, expected_logs)


def test_get_internal_repo_name():
    internal_name = misc.get_internal_container_repo_name("namespace/repo")
    assert internal_name == "namespace----repo"


def test_get_internal_repo_name_no_delimeter():
    internal_name = misc.get_internal_container_repo_name("namespace-repo")
    assert internal_name == "namespace-repo"


def test_get_internal_repo_name_errors():
    with pytest.raises(ValueError, match="Input repository containing a delimeter.*"):
        misc.get_internal_container_repo_name("/namespacerepo")

    with pytest.raises(ValueError, match="Input repository containing a delimeter.*"):
        misc.get_internal_container_repo_name("namespacerepo/")

    with pytest.raises(ValueError, match="Input repository containing a delimeter.*"):
        misc.get_internal_container_repo_name("name/space/repo")


def test_get_external_repo_name():
    internal_name = misc.get_external_container_repo_name("namespace----repo")
    assert internal_name == "namespace/repo"


def test_get_external_repo_name_no_delimeter():
    internal_name = misc.get_external_container_repo_name("namespace-repo")
    assert internal_name == "namespace-repo"


def test_get_external_repo_name_errors():
    with pytest.raises(ValueError, match="Input repository containing a delimeter.*"):
        misc.get_external_container_repo_name("----namespacerepo")

    with pytest.raises(ValueError, match="Input repository containing a delimeter.*"):
        misc.get_external_container_repo_name("namespacerepo----")

    with pytest.raises(ValueError, match="Input repository containing a delimeter.*"):
        misc.get_external_container_repo_name("name----space----repo")


def test_get_pyxis_ssl_paths_hook(fake_cert_key_paths):
    cert, key = misc.get_pyxis_ssl_paths({"pyxis_server": "some-url"})
    assert cert == "/path/to/file.crt"
    assert key == "/path/to/file.key"


def test_get_pyxis_ssl_paths_target_settings():
    cert, key = misc.get_pyxis_ssl_paths(
        {
            "pyxis_server": "some-url",
            "pyxis_ssl_cert": "/some/file.crt",
            "pyxis_ssl_key": "/some/file.key",
        }
    )
    assert cert == "/some/file.crt"
    assert key == "/some/file.key"


def test_get_pyxis_ssl_paths_error():
    with pytest.raises(ValueError, match="No key and certificate paths were.*"):
        cert, key = misc.get_pyxis_ssl_paths({"pyxis_server": "some-url"})
